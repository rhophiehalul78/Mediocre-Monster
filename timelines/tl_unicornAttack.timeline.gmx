<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<timeline>
  <entry>
    <step>0</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sets gob's attack sprite, attackspeed and coordinates

sprite_index = attack_sprite;
image_index=0;
image_speed = 0.5;
depth = hero[targetselect].depth - 0.5;

//timing corrections based on hero
atkspeed = 35;
atky = hero[targetselect].y;

if (targetselect == 0)
{
    atky -= 80;
}
if (targetselect == 1) 
{
    atky -= 30;
    atkspeed = 30;
}

//movement towards hero
move_towards_point(hero[targetselect].x, atky, atkspeed );

//taunt check
if(taunted)
{
    taunted = 0;
    if(targetselect!=taunter)
    {
        temprqs-=10;
        draw_battletext_outline("Error",x,y-30,c_black,c_red);
        if (battlecount == 2)
        {
            last_performance_errors++;
        }
    }
    else 
    {
        temprqs += 10;
        temprqs += 10;
        draw_battletext_outline("Thats a good",x,y-30,c_black,c_aqua);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>15</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Play hurt sound and display hurt sprite of attacked target
speed = 0;
image_speed = 0;
audio_play_sound(attack_sfx,2,0);
audio_play_sound(hero[targetselect].hurt_sfx,1,0);

battlevalue = irandom_range(strength - 3, strength + 3);

with(hero[targetselect])
{
    currenthp -= battlevalue;
    draw_battletext_outline(string(battlevalue),x,y,c_black,c_white);
    isSleeping = false;
    sprite_index = hurt_sprite;
    image_index = 0;

    battlePoints += floor((battlevalue / hero[targetselect].maxhp) * 100);
    
    if(currenthp &gt; 0)
    {
        sprite_index = hurt_sprite;
        image_speed = stateSpeed;
        image_index = 0;
    }
    else
    {
        process_dead_character(hero[targetselect]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>20</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move back to original position
move_towards_point(origin_x,origin_y,atkspeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>35</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Revert back to idle sprite, call first hero to do action
sprite_index = idle_sprite;
speed = 0;
image_speed = stateSpeed;
x=origin_x;
y=origin_y;
depth = orig_depth;

turn_end_handler();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
</timeline>
