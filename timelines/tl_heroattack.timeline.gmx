<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<timeline>
  <entry>
    <step>0</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hero attacks Gob
crit_enabled = true;
if(monster[0].isDead &amp;&amp; monster[1].isDead &amp;&amp; monster[2].isDead)
{
    timeline_running = 0;
}
else
{
    do 
    {
        targetselect = irandom(2);
    }
    until(!monster[targetselect].isDead &amp;&amp; monster[targetselect].isActive)
    
    critspaced = 0;
    sprite_index = attack_sprite;
    image_index=0;
    image_speed = 0.4;
    battlebox("Attack");
    
    //timing corrections based on hero
    atkspeed = 30;
    atky = obj_battlegob.y;
    
    if (hero_pos == 0) 
    {
        atky += 100;
    }
    if (hero_pos == 1) 
    {
        atky -= 25;
        atkspeed = 22;
    }

    //movement towards Gob
    move_towards_point(monster[targetselect].x, monster[targetselect].y, atkspeed );

    //determine if crit
    critting = 0;
    critrandom = irandom_range(1,100);
    critchance = 25;
    if(critrandom &lt;= critchance) &amp;&amp; (crit_enabled)
    {
        critting = 1;
    }

    if(critting)
    {
        flash = 1;
        attackingHero = hero_pos;
        blendWhite = 1;
    }

    battlevalue = irandom_range(strength - 3, strength + 3);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>2</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set flash variable to 0
flash = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>11</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set values for depth, critwindow, flash and blendWhite
depth = -0.5
flash = 0;
critwindow = 1;
blendWhite = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>13</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set speed of image to 0 and play attack sound
speed = 0;
audio_play_sound(attack_sfx,2,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>16</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Monsters get hit, HP deducted
critwindow = 0;

// Check if Gob lets himself get hit by critical
if (crithit) &amp;&amp; (crit_enabled)
{
    // Gob unneccessarily pressed crit trigger
    if(!critting)
    {
        temprqs-=10;
        draw_battletext_outline("Noperz",x,y-30,c_black,c_red);
        if (battlecount == 1)
        {
            last_performance_errors++
        }
        
        RQSScore -= 10;
        
        if(RQSScore &lt;= 0)
        {
            RQSScore = 0;
        }
    }
    // Gob pressed crit button correctly
    else
    {
        temprqs+=10;
        draw_battletext_outline("Thats a good",x,y-30,c_black,c_aqua);
    }

    audio_play_sound(sfx_crit,2,0);
    battlevalue = battlevalue * 1.5;
}

// Hero crit but Gob didn't pressed correct button
if (critting) &amp;&amp; (crithit == 0) &amp;&amp; (crit_enabled)
{
    temprqs-=10;
    draw_battletext_outline("Noperz",x,y-30,c_black,c_red);
    if (battlecount == 1)
    {
        last_performance_errors++;
    }
    RQSScore -= 10;
    
    if(RQSScore &lt;= 0)
    {
        RQSScore = 0;
    }
}

with(monster[targetselect])
{
    currenthp-= battlevalue;
    draw_battletext_outline(string(battlevalue),x,y,c_black,c_white);
    isSleeping = false;    
    
    if(currenthp &gt; 0)
    {
        sprite_index = hurt_sprite;
        image_speed = stateSpeed;
        image_index = 0;
        audio_play_sound(hurt_sfx,1,0);
    }
    else
    {
        process_dead_character(monster[targetselect]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>18</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move back hero to its starting position
move_towards_point(origin_x,origin_y,atkspeed);
crithit = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>23</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset original depth
depth = orig_depth;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
  <entry>
    <step>33</step>
    <event>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Revert to idle state and check whether it's Gob's turn
sprite_index = idle_sprite;
speed = 0;
image_speed = stateSpeed;
x = origin_x;
y = origin_y;
depth = orig_depth;

turn_end_handler();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </entry>
</timeline>
