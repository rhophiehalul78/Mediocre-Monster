<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize sprites

// positional
origin_x=x;
origin_y=y;
orig_depth = depth;

// sound effects
attack_sfx = sfx_sharp;
hurt_sfx = sfx_hurtman;
death_sfx = sfx_roar;

// sprites
idle_sprite = sp_guyb_idle;
hurt_sprite = sp_guyb_hit;
attack_sprite = sp_guyb_attack;
victory_sprite = sp_guyb_victory;
victoryend_sprite = sp_guyb_victoryend;

// turn scripts
turn_script = turn_guyb;
turn_scriptAttack = turn_guyb;

// hero description
hero_class = "rogue";
hname = "GUY";

// status variables
isDead = false;
isRegening = false;
isPoisoned = false;
isSleeping = false;
agilityMultiplier = 1;
stateSpeed = 0.4;
beinghealed = 0;

// status turn counters
hasteTurnCounter = 0;
slowTurnCounter = 0;
regenTurnCounter = 0;
poisonTurnCounter = 0;
sleepTurnCounter = 0;
 
// draw effects related
flash = 0;
blendWhite = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change sprite
if (sprite_index == hurt_sprite) { //change 'jumping' to whatever your jumping sprite is
image_index = 0; //change the number to the number of the last frame of animation (i.e. if your animation has three frames, you'd set this number to 2
sprite_index = idle_sprite;
image_speed = 0.3
}
else
if (sprite_index == death_sprite) { 
image_index = image_number-1;//change 'jumping' to whatever your jumping sprite is
image_speed = 0; //change the number to the number of the last frame of animation (i.e. if your animation has three frames, you'd set this number to 2
}

if (sprite_index == attack_sprite) { //change 'jumping' to whatever your jumping sprite is
image_index = 0; //change the number to the number of the last frame of animation (i.e. if your animation has three frames, you'd set this number to 2
sprite_index = idle_sprite;
image_speed = 0.3
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set shadow 
d3d_set_fog(true,c_dkgray,0,0); //before drawing

draw_sprite_ext(sprite_index,image_index,x+1,y+(sprite_height/1.5),image_xscale,-image_yscale/2,image_angle,c_dkgray,0.2);
d3d_set_fog(false,c_dkgray,0,0);
draw_self();

if(crithit)&amp;&amp;(sprite_index == hurt_sprite)
{
    draw_sprite(sp_critblast,0,x,y)
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Status Effect for Poison
if(isPoisoned)
{
    draw_sprite_ext(spr_poisonAfflicted, -1, x, y-(sprite_height/2), image_xscale, image_yscale, image_angle, c_white, 1);
    
    draw_sprite_ext(sprite_index,image_index,x-2,y,
    image_xscale,image_yscale,image_angle,c_purple,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x+2,y,image_xscale,
    image_yscale,image_angle,c_purple,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x,y-2,image_xscale,
    image_yscale,image_angle,c_purple,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x,y+2,image_xscale,
    image_yscale,image_angle,c_purple,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,
    image_yscale,image_angle,image_blend,image_alpha);
    image_blend = c_purple;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Status effect for Sleep
if(isSleeping)
{
    draw_sprite_ext(spr_sleepAfflicted, -1, x, y-(sprite_height/2), image_xscale, image_yscale, image_angle, c_white, 1);
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Status effect for regen
if(isRegening)
{
    var regenColor = make_color_rgb(198,255,96);
    draw_sprite_ext(spr_potion, -1, x, y, image_xscale, image_yscale, image_angle, c_white, 1);
    
    draw_sprite_ext(sprite_index,image_index,x-2,y,
    image_xscale,image_yscale,image_angle,regenColor,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x+2,y,image_xscale,
    image_yscale,image_angle,regenColor,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x,y-2,image_xscale,
    image_yscale,image_angle,regenColor,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x,y+2,image_xscale,
    image_yscale,image_angle,regenColor,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,
    image_yscale,image_angle,image_blend,image_alpha);
    image_blend = regenColor;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Status effect for haste
if(agilityMultiplier &gt; 1)
{
    draw_sprite_ext(spr_hasteAfflicted, -1, x, y+(sprite_height/3), image_xscale, image_yscale, image_angle, c_white, 1);
    
    if(creatureType == "monster")
    {
        draw_sprite_ext(sprite_index,image_index,x+2,y,
        image_xscale,image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x-2,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x-4,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x-6,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x-8,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x-16,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x,y-2,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x,y+2,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,
        image_yscale,image_angle,image_blend,image_alpha);  
    }
    else
    {
        draw_sprite_ext(sprite_index,image_index,x-2,y,
        image_xscale,image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x+2,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x+4,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x+6,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x+8,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x+16,y,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x,y-2,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x,y+2,image_xscale,
        image_yscale,image_angle,c_orange,image_alpha);
        draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,
        image_yscale,image_angle,image_blend,image_alpha);    
    }
    image_blend = c_orange;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Status effect for slow
if(agilityMultiplier &lt; 1)
{
    var slowColor = make_color_rgb(147,198,198);
    draw_sprite_ext(spr_slowAfflicted, -1, x, y-(sprite_height/2), image_xscale, image_yscale, image_angle, c_white, 1);
 
    draw_sprite_ext(sprite_index,image_index,x-2,y,
    image_xscale,image_yscale,image_angle,slowColor,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x+2,y,image_xscale,    
    image_yscale,image_angle,slowColor,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x,y-2,image_xscale,
    image_yscale,image_angle,slowColor,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x,y+2,image_xscale,
    image_yscale,image_angle,slowColor,image_alpha);
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,
    image_yscale,image_angle,image_blend,image_alpha);
    image_blend = slowColor;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Being healed
if(beinghealed)
{
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_lime,.75);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flashing
if (flash)
{
    d3d_set_fog(true,c_white,0,0);     
    audio_play_sound(sfx_swordSwipe,0,0);
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,1);    
    instance_create(x,y,obj_effectCritical);
    d3d_set_fog(false,c_white,0,0);    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blend White
if(blendWhite)
{
    d3d_set_fog(true,c_white,0,0);     
    draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,c_white,1);  
    d3d_set_fog(false,c_white,0,0); 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// No color-changing status
if !isPoisoned &amp;&amp; !isRegening &amp;&amp; (agilityMultiplier == 1)
{
    // reset color shading
    image_blend = -1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
