<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize states and variables
cursorPosition = 1;
optionCount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove title
options_remove();   
if(instance_exists(obj_cutsceneController))
        {
            with(obj_cutsceneController)
            {
                timeline_running = true;
            }
        }
            
        if(instance_exists(obj_goblin))
        {
            if(obj_goblin.inCutscene == false)
            {
                obj_goblin.free = true;
            }
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reactivate instances to unpause the game
/* Reactivate instances before draw event so there is no frame
   where they aren't drawn */
if(!is_message() &amp;&amp; sprite_exists(pauseImg)) {
    instance_activate_all();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize global variables and other settings
//Set up the message system when the game starts
message_init();

//Variable for later (See Draw event)
pauseImg = noone;

// variable for setting the new x and y coordinates of Goblin in the new room
//global.newRoomX = 2700;
//global.newRoomY = 2300;

// variable for determining whether it is currently day or night
global.isDay = true;

/// initialize glopbal variables
enum goblinColor
{
    green = 0,
    yellow = 1,
    blue = 2,
}

// setting up default sprite for each goblin color
// green
global.goblinSprite[goblinColor.green, 0] = spr_goblinBack;
global.goblinSprite[goblinColor.green, 1] = spr_goblinLeft;
global.goblinSprite[goblinColor.green, 2] = spr_goblinRight;
global.goblinSprite[goblinColor.green, 3] = spr_goblinFront;
// yellow
//global.goblinSprite[goblinColor.yellow, 0] = spr_goblinBackYellow;
//global.goblinSprite[goblinColor.yellow, 1] = spr_goblinLeftYellow;
//global.goblinSprite[goblinColor.yellow, 2] = spr_goblinRightYellow;
//global.goblinSprite[goblinColor.yellow, 3] = spr_goblinFrontYellow;
// blue
//global.goblinSprite[goblinColor.blue, 0] = spr_goblinBackBlue;
//global.goblinSprite[goblinColor.blue, 1] = spr_goblinLeftBlue;
//global.goblinSprite[goblinColor.blue, 2] = spr_goblinRightBlue;
//global.goblinSprite[goblinColor.blue, 3] = spr_goblinFrontBlue;

global.isNewGame = true;

global.gobWalkSpeed = 8;

// enumeration for determining which part of the story the player is currently
enum storyChapterIndex
{
    Day0_Intro = 0,
    Day1_LobbyGreeting = 1,
    Day1_Promotion = 2,
    Day1_ForestDummyBattle = 3,
    Day2_ActualBattle = 4,
    Day2_DogSlapSession = 5,
    Day3_Crit = 6,
    Day3_DogCritSession = 7,
    Day4_Taunt = 8,
    Day4_DogTauntSession = 9,
    Day5_ItemDrop = 10,
    Day6_EndDemo = 11,
}

// initial value of story chapter is Gob's promotion 
global.storyChapter = storyChapterIndex.Day1_Promotion;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw messages and pause game
//Only draw messages if there are some
if(is_message()) 
{
    /* Pause the rest of the game while messages exist.
    If you don't want that to happen, delete this -&gt; */
    /*if(!sprite_exists(pauseImg)) {
        //Get an image of the screen
    
        var surf;
        
        surf = surface_create(1024,640);
        surface_set_target(surf);
        view_surface_id[1] = surf;
        surface_reset_target();
        
        pauseImg = sprite_create_from_surface(application_surface, 0, 0, 1024, 640, false, false, 0, 0);
        //And stop all actions, not including this one
        instance_deactivate_all(true);
    }
    //Draw the pause sprite
    draw_sprite(pauseImg, 0, view_xview[0], view_yview[0]);
    /* End point for comment */
    
    message_draw();
    
    if(instance_exists(obj_cutsceneController))
    {
        with(obj_cutsceneController)
        {
            timeline_running = false;
        }
    }
    
    if(instance_exists(obj_goblin))
    {
        obj_goblin.free = false;
    }
} 
else 
{
    //Clear the sprite from memory
    if(sprite_exists(pauseImg)) 
    {
        sprite_delete(pauseImg);
    }
}

if(is_options())
{
    options_draw();
    
    if(instance_exists(obj_cutsceneController))
    {
        with(obj_cutsceneController)
        {
            timeline_running = false;
        }
    }
    
    if(instance_exists(obj_goblin))
    {
        obj_goblin.free = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move cursor up
if(is_options()) 
{
    if(object_exists(obj_pointer))
    {        
        switch(optionCount)
        {
            case 2:
                if (cursorPosition = 2)
                {
                    obj_pointer.y -= 150;
                    cursorPosition = 1;
                }
                else
                {
                    obj_pointer.y += 150;
                    cursorPosition = 2;
                }
                audio_play_sound(sfx_popAlert, 2, 0);
                break;
            case 3:
                if (cursorPosition == 1)
                {
                    obj_pointer.y += 270;
                    cursorPosition = 3;
                }
                else if(cursorPosition == 2)
                {
                    obj_pointer.y -= 135;
                    cursorPosition = 1;    
                }
                else
                {
                    obj_pointer.y -= 135;
                    cursorPosition = 2;  
                }
                audio_play_sound(sfx_popAlert, 2, 0);
                break;
             default:
                break;
        }       
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move cursor down
if(is_options()) 
{
    if(object_exists(obj_pointer))
    {        
        switch(optionCount)
        {
            case 2:
                if (cursorPosition == 1)
                {
                    obj_pointer.y += 150;
                    cursorPosition = 2;
                }
                else
                {
                    obj_pointer.y -= 150;
                    cursorPosition = 1;    
                }
                audio_play_sound(sfx_popAlert, 2, 0);
                break;
            case 3:
                if (cursorPosition == 1)
                {
                    obj_pointer.y += 135;
                    cursorPosition = 2;
                }
                else if(cursorPosition == 2)
                {
                    obj_pointer.y += 135;
                    cursorPosition = 3;    
                }
                else
                {
                    obj_pointer.y -= 270;
                    cursorPosition = 1;  
                }
                audio_play_sound(sfx_popAlert, 2, 0);
                break;
            default:
                break;
            
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove message, or skip to end
if(is_message()) {
    if(pos &lt; string_length(message_read())) {
        pos = string_length(message_read());
    } else {
        message_remove();
        bust_remove();
        
        if(instance_exists(obj_cutsceneController))
        {
            with(obj_cutsceneController)
            {
                timeline_running = true;
            }
        }
        
        if(instance_exists(obj_goblin))
        {
            if(obj_goblin.inCutscene == false)
            {
                obj_goblin.free = true;
            }
        }
        //Put a sound here if you want one when the messages are closed
    }
}

if(is_options()) 
{
    if(optionCount &gt; 1)
    {
        options_remove();      
        audio_play_sound(sfx_select, 1, 0);
        if(instance_exists(obj_cutsceneController))
        {
            with(obj_cutsceneController)
            {
                timeline_running = true;
            }
        }
            
        if(instance_exists(obj_goblin))
        {
            if(obj_goblin.inCutscene == false)
            {
                obj_goblin.free = true;
            }
        }
        
        if(instance_exists(obj_pointer))
        {
            with(obj_pointer)
            {
                instance_destroy();
            }        
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
