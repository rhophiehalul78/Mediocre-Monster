<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize battle variables
turnOrder = ds_priority_create();
RQSScore = 100;
battlePoints = 0;

//generate heroes
hero_group = 1; 
bantercounter = 0;
turnCount = 0;







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Character Base stats
// For Gob
monsterStats[monsterConstants.Gob,characterStats.HP] = 56;
monsterStats[monsterConstants.Gob,characterStats.Strength] = 15;
monsterStats[monsterConstants.Gob,characterStats.Magic] = 8;
monsterStats[monsterConstants.Gob,characterStats.Defense] = 0;
monsterStats[monsterConstants.Gob,characterStats.Spirit] = 0;
monsterStats[monsterConstants.Gob,characterStats.Agility] = 8;

// For Yeti
monsterStats[monsterConstants.Yeti,characterStats.HP] = 65;
monsterStats[monsterConstants.Yeti,characterStats.Strength] = 18;
monsterStats[monsterConstants.Yeti,characterStats.Magic] = 8;
monsterStats[monsterConstants.Yeti,characterStats.Defense] = 1;
monsterStats[monsterConstants.Yeti,characterStats.Spirit] = 0;
monsterStats[monsterConstants.Yeti,characterStats.Agility] = 6;

// For Unicorn
monsterStats[monsterConstants.Unicorn,characterStats.HP] = 34;
monsterStats[monsterConstants.Unicorn,characterStats.Strength] = 9;
monsterStats[monsterConstants.Unicorn,characterStats.Magic] = 16;
monsterStats[monsterConstants.Unicorn,characterStats.Defense] = 0;
monsterStats[monsterConstants.Unicorn,characterStats.Spirit] = 0;
monsterStats[monsterConstants.Unicorn,characterStats.Agility] = 7;

// For Guy
heroStats[heroConstants.Guy,characterStats.HP] = 100;
heroStats[heroConstants.Guy,characterStats.Strength] = 15;
heroStats[heroConstants.Guy,characterStats.Magic] = 5;
heroStats[heroConstants.Guy,characterStats.Defense] = 0;
heroStats[heroConstants.Guy,characterStats.Spirit] = 0;
heroStats[heroConstants.Guy,characterStats.Agility] = 9;
heroStats[heroConstants.Guy,characterStats.XOffset] = 0;

// For Borgor
heroStats[heroConstants.Borgor,characterStats.HP] = 150;
heroStats[heroConstants.Borgor,characterStats.Strength] = 13;
heroStats[heroConstants.Borgor,characterStats.Magic] = 1;
heroStats[heroConstants.Borgor,characterStats.Defense] = 5;
heroStats[heroConstants.Borgor,characterStats.Spirit] = 0;
heroStats[heroConstants.Borgor,characterStats.Agility] = 4;
heroStats[heroConstants.Borgor,characterStats.XOffset] = 0;

// For Elena
heroStats[heroConstants.Elena,characterStats.HP] = 80;
heroStats[heroConstants.Elena,characterStats.Strength] = 5;
heroStats[heroConstants.Elena,characterStats.Magic] = 10;
heroStats[heroConstants.Elena,characterStats.Defense] = 0;
heroStats[heroConstants.Elena,characterStats.Spirit] = 10;
heroStats[heroConstants.Elena,characterStats.Agility] = 7;
heroStats[heroConstants.Elena,characterStats.XOffset] = 0;

// For Kraien
heroStats[heroConstants.Kraien,characterStats.HP] = 100;
heroStats[heroConstants.Kraien,characterStats.Strength] = 17;
heroStats[heroConstants.Kraien,characterStats.Magic] = 10;
heroStats[heroConstants.Kraien,characterStats.Defense] = 0;
heroStats[heroConstants.Kraien,characterStats.Spirit] = 0;
heroStats[heroConstants.Kraien,characterStats.Agility] = 10;
heroStats[heroConstants.Kraien,characterStats.XOffset] = -100;

// For Rust
heroStats[heroConstants.Rust,characterStats.HP] = 90;
heroStats[heroConstants.Rust,characterStats.Strength] = 25;
heroStats[heroConstants.Rust,characterStats.Magic] = 8;
heroStats[heroConstants.Rust,characterStats.Defense] = 0;
heroStats[heroConstants.Rust,characterStats.Spirit] = 0;
heroStats[heroConstants.Rust,characterStats.Agility] = 7;
heroStats[heroConstants.Rust,characterStats.XOffset] = -200;

// For Sandrajilt
heroStats[heroConstants.Sandrajilt,characterStats.HP] = 85;
heroStats[heroConstants.Sandrajilt,characterStats.Strength] = 10;
heroStats[heroConstants.Sandrajilt,characterStats.Magic] = 20;
heroStats[heroConstants.Sandrajilt,characterStats.Defense] = 0;
heroStats[heroConstants.Sandrajilt,characterStats.Spirit] = 5;
heroStats[heroConstants.Sandrajilt,characterStats.Agility] = 9;
heroStats[heroConstants.Sandrajilt,characterStats.XOffset] = 0;

// For Sbitnaya
heroStats[heroConstants.Sbitnaya,characterStats.HP] = 125;
heroStats[heroConstants.Sbitnaya,characterStats.Strength] = 16;
heroStats[heroConstants.Sbitnaya,characterStats.Magic] = 1;
heroStats[heroConstants.Sbitnaya,characterStats.Defense] = 3;
heroStats[heroConstants.Sbitnaya,characterStats.Spirit] = 0;
heroStats[heroConstants.Sbitnaya,characterStats.Agility] = 12;

// For Swivelclaw
heroStats[heroConstants.Swivelclaw,characterStats.HP] = 90;
heroStats[heroConstants.Swivelclaw,characterStats.Strength] = 13;
heroStats[heroConstants.Swivelclaw,characterStats.Magic] = 1;
heroStats[heroConstants.Swivelclaw,characterStats.Defense] = 3;
heroStats[heroConstants.Swivelclaw,characterStats.Spirit] = 0;
heroStats[heroConstants.Swivelclaw,characterStats.Agility] = 11;

// For Tonton
heroStats[heroConstants.Tonton,characterStats.HP] = 145;
heroStats[heroConstants.Tonton,characterStats.Strength] = 12;
heroStats[heroConstants.Tonton,characterStats.Magic] = 1;
heroStats[heroConstants.Tonton,characterStats.Defense] = 4;
heroStats[heroConstants.Tonton,characterStats.Spirit] = 0;
heroStats[heroConstants.Tonton,characterStats.Agility] = 9;

// For Tosa Inu
heroStats[heroConstants.TosaInu,characterStats.HP] = 145;
heroStats[heroConstants.TosaInu,characterStats.Strength] = 15;
heroStats[heroConstants.TosaInu,characterStats.Magic] = 1;
heroStats[heroConstants.TosaInu,characterStats.Defense] = 5;
heroStats[heroConstants.TosaInu,characterStats.Spirit] = 0;
heroStats[heroConstants.TosaInu,characterStats.Agility] = 7;

// For WalletBarrace
heroStats[heroConstants.WalletBarrace,characterStats.HP] = 155;
heroStats[heroConstants.WalletBarrace,characterStats.Strength] = 13;
heroStats[heroConstants.WalletBarrace,characterStats.Magic] = 1;
heroStats[heroConstants.WalletBarrace,characterStats.Defense] = 5;
heroStats[heroConstants.WalletBarrace,characterStats.Spirit] = 0;
heroStats[heroConstants.WalletBarrace,characterStats.Agility] = 6;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize placement and populate turn priority queue
randomize();
hero_group = irandom_range(1,2);
hero_group = 2;

if (hero_group == 1)
{
    instance_create(928,160,obj_guyb);
    hero[0] = obj_guyb;
    instance_create(896,288,obj_tank);
    hero[1] = obj_tank;
    instance_create(960,448,obj_priest);
    hero[2] = obj_priest;
        
    for(i=0; i&lt;=2; i++)
    {
        hero[i].currenthp = irandom_range(floor(heroStats[i,characterStats.HP] * 0.85), heroStats[i,characterStats.HP]);
        hero[i].strength = heroStats[i, characterStats.Strength];
        hero[i].maxhp = heroStats[i,characterStats.HP];
        hero[i].defense = heroStats[i, characterStats.Defense];
        hero[i].agility = heroStats[i, characterStats.Agility];
        hero[i].magic = heroStats[i, characterStats.Magic];
        hero[i].spirit = heroStats[i, characterStats.Spirit];
        hero[i].maxMP = floor(1.5 * hero[i].magic);
        hero[i].currentMP = irandom_range(0, hero[i].maxMP);
    }  
}
else
{   
    hero[0] = obj_kraien;    
    hero[1] = obj_sandrajilt;    
    hero[2] = obj_rust;
    instance_create(828,160,obj_kraien);
    instance_create(896,288,obj_sandrajilt);
    instance_create(860,448,obj_rust);
    
    for(i=0; i&lt;=2; i++)
    {
        hero[i].currenthp = irandom_range(heroStats[i+3,characterStats.HP]/2, heroStats[i+3,characterStats.HP]);
        hero[i].strength = heroStats[i+3, characterStats.Strength];
        hero[i].maxhp = heroStats[i+3,characterStats.HP];
        hero[i].defense = heroStats[i+3, characterStats.Defense];
        hero[i].agility = heroStats[i+3, characterStats.Agility];
        hero[i].magic = heroStats[i+3, characterStats.Magic];
        hero[i].spirit = heroStats[i+3, characterStats.Spirit];
        //hero[i].x += heroStats[i+3, characterStats.XOffset];
        hero[i].maxMP = floor(1.5 * hero[i].magic);
        hero[i].currentMP = irandom_range(0, hero[i].maxMP);
    }
     
}

    hero[0].hero_pos = 0;
    hero[1].hero_pos = 1;
    hero[2].hero_pos = 2;

instance_create(280,160,obj_battleYeti);
monster[0] = obj_battleYeti;
monster[0].currenthp = monsterStats[monsterConstants.Yeti,characterStats.HP];
monster[0].maxhp = monsterStats[monsterConstants.Yeti,characterStats.HP];
monster[0].strength = monsterStats[monsterConstants.Yeti,characterStats.Strength];
monster[0].agility = monsterStats[monsterConstants.Yeti,characterStats.Agility];
monster[0].magic = monsterStats[monsterConstants.Yeti,characterStats.Magic];
monster[0].maxMP = floor(1.5 * monster[0].magic);
monster[0].currentMP = monster[0].maxMP;
monster[0].isActive = false;

monster[1] = obj_battlegob;
monster[1].currenthp = monsterStats[monsterConstants.Gob,characterStats.HP];
monster[1].maxhp = monsterStats[monsterConstants.Gob,characterStats.HP];
monster[1].strength = monsterStats[monsterConstants.Gob,characterStats.Strength];
monster[1].agility = monsterStats[monsterConstants.Gob,characterStats.Agility];
monster[1].magic = monsterStats[monsterConstants.Gob,characterStats.Magic];
monster[1].maxMP = floor(1.5 * monster[1].magic);
monster[1].currentMP = monster[1].maxMP;
monster[1].isActive = true;

instance_create(280,448,obj_battleUnicorn);
monster[2] = obj_battleUnicorn;
monster[2].currenthp = monsterStats[monsterConstants.Unicorn,characterStats.HP];
monster[2].maxhp = monsterStats[monsterConstants.Unicorn,characterStats.HP];
monster[2].strength = monsterStats[monsterConstants.Unicorn,characterStats.Strength];
monster[2].agility = monsterStats[monsterConstants.Unicorn,characterStats.Agility];
monster[2].magic = monsterStats[monsterConstants.Unicorn,characterStats.Magic];
monster[2].maxMP = floor(1.5 * monster[2].magic);
monster[2].currentMP = monster[2].maxMP;
monster[2].isActive = true;



//assign items
items[1] = "potion";
items[2] = "tent";
items[3] = "sleeping bag";

//initialize banter
alarm[0] = 1;

// Organize turn order by populating dataset with characters' agility
if(monster[0].isActive)
{
    ds_priority_add(turnOrder,monster[0],monsterStats[monsterConstants.Yeti,characterStats.Agility]);
    ds_priority_add(turnOrder,monster[0],monsterStats[monsterConstants.Yeti,characterStats.Agility]  - 50);
}

if(monster[1].isActive)
{
    ds_priority_add(turnOrder,monster[1],monsterStats[monsterConstants.Gob,characterStats.Agility]);
    ds_priority_add(turnOrder,monster[1],monsterStats[monsterConstants.Gob,characterStats.Agility]  - 50);
}

if(monster[2].isActive)
{
    ds_priority_add(turnOrder,monster[2],monsterStats[monsterConstants.Unicorn,characterStats.Agility]);
    ds_priority_add(turnOrder,monster[2],monsterStats[monsterConstants.Unicorn,characterStats.Agility]  - 50);
}

ds_priority_add(turnOrder,hero[0],hero[0].agility);
ds_priority_add(turnOrder,hero[1],hero[1].agility);
ds_priority_add(turnOrder,hero[2],hero[2].agility);

// Populate second turn
ds_priority_add(turnOrder,hero[0],hero[0].agility - 50);
ds_priority_add(turnOrder,hero[1],hero[1].agility  - 50);
ds_priority_add(turnOrder,hero[2],hero[2].agility  - 50);

for(i=0; i&lt;=2; i++)
{
    monster[i].visible = monster[i].isActive
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Command menu related
// Skillset arrays
GobCommands[0] = "Attack";
GobCommands[1] = "Cheap Tricks";
GobCommands[2] = "Item";

YetiCommands[0] = "Attack";
YetiCommands[1] = "Bro Moves";
YetiCommands[2] = "Item";

UnicornCommands[0] = "Attack";
UnicornCommands[1] = "Thaumaturgy";
UnicornCommands[2] = "Item";

// Gob Skills
GobSkills[0,0] = "Goblin's Sleep";
GobSkills[0,1] = 7;
GobSkills[1,0] = "Cheap Shot";
GobSkills[1,1] = 6;
GobSkills[2,0] = "Hemogoblin";
GobSkills[2,1] = 6;

YetiSkills[0,0] = "Yeti's Sleep";
YetiSkills[0,1] = 5;
YetiSkills[1,0] = "Yeti Shot";
YetiSkills[1,1] = 6;
YetiSkills[2,0] = "Love you no Homo";
YetiSkills[2,1] = 6;

UnicornSkills[0,0] = "Unicorn's Sleep";
UnicornSkills[0,1] = 6;
UnicornSkills[1,0] = "Unicorn Shot";
UnicornSkills[1,1] = 6;
UnicornSkills[2,0] = "Rare Unicorn";
UnicornSkills[2,1] = 6;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set RQS and HP Bars to be visible
obj_herohp.visible = true;
obj_hero1HP.visible = true;
obj_hero2HP.visible = true;
obj_gobhp.visible = true;
obj_monster1HP.visible = true;
obj_monster2HP.visible = true;
obj_rqs.visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///start battle
display_turnPanel();

// when it's time to attack
if(!ds_priority_empty(turnOrder))
{
    actingObject = ds_priority_delete_max(turnOrder);
    firstToAct = actingObject;
    with(actingObject)
    {
        if(creatureType == "monster")
        {
            myturn = turnPhase.SelectCommand;
            obj_pointer.visible = 1;
            obj_attack.visible = 1;
            obj_gobhp.visible = 1;
            obj_herohp.visible = 1;
            obj_rqs.visible = 1;
            commandMenuIndex = 0;
            audio_play_sound(sfx_select,1,0);
        }
        else
        {
            script_execute(turn_script);
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Battle banter
banterdone = 0;
banterinterval = 60;


draw_set_valign(fa_middle);
draw_set_halign(fa_left);

//start battle
/*
if(banterstate == 1)
{
    switch(battlecount)
    {
        case 0:
            switch(bantercounter)
            {
                case 0:
                    quick_message(hero[1],"A GOBLIN!!!!!!");
                    alarm[0] = banterinterval;
                    break;
                case 1: 
                    quick_message(hero[2],"We're wasting our time 
                        #on a weak enemy like that.");
                    alarm[0] = banterinterval; 
                    break; 
                case 2:
                    quick_message(hero[0],"How dare you show yourself. 
                        #Prepare to die!");
                    alarm[0] = banterinterval; 
                    break;
                default:  
                    alarm[1] = 1;
                    break;
            }
            break;    
        case 1:
            switch(bantercounter)
            {
                case 0:
                    quick_message(hero[1],"ARE YOU STRONG ENOUGH?");
                    alarm[0] = banterinterval;
                    break;
                case 1: 
                    quick_message(hero[2],"Conserve our potions.");
                    alarm[0] = banterinterval; 
                    break; 
                case 2:
                    quick_message(hero[0],"In the name of the 
                        #king of Adventuria, I shall smite you!");
                    alarm[0] = banterinterval; 
                    break;
                default:  
                    alarm[1] = 1;
                    break;
            }
            break;    
        case 2:
            switch(bantercounter)
            {
                case 0:
                    quick_message(hero[1],"Hey guys. Check out my 
                        #new skill called 'TAUNT'");
                    alarm[0] = banterinterval;
                    break;
                case 1: 
                    quick_message(hero[2],"This should be interesting.");
                    alarm[0] = banterinterval; 
                    break; 
                case 2:
                    quick_message(hero[0],"No need for that. CHARGE!!!!");
                    alarm[0] = banterinterval; 
                    break;
                default:  
                    alarm[1] = 1;
                    break;
            }
            break;    
        case 3:
            switch(bantercounter)
            {
                case 0:
                    quick_message(hero[1],"Didn't we just fought this guy before?");
                    alarm[0] = banterinterval;
                    break;
                case 1: 
                    quick_message(hero[2],"Another cannon fodder.");
                    alarm[0] = banterinterval; 
                    break; 
                case 2:
                    quick_message(hero[0],"I can do this all day.");
                    alarm[0] = banterinterval; 
                    break;
                default:  
                    alarm[1] = 1;
                    break;
            }
            break;   
    }
    bantercounter+=1;
}
*/
alarm[1] = 1;




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Endgame Banter
/*
if(banterstate ==2)
{

    if(battlecount == 1)
    {
        switch(bantercounter)
        {
            case 0:
                quick_message(hero[1],"Dead? Harumph.");
                alarm[0] = banterinterval;
                break;
            case 1: 
                quick_message(hero[2],"Not a single item drop...");
                alarm[0] = banterinterval; 
                break; 
            case 2:
                quick_message(hero[0],"The Legend of the Adventure #
                    continues!!!");
                alarm[0] = banterinterval; 
                break;
            case 3:
                fadeout();
                sound_fade(mus_peace,0,2000)
                alarm[0] = banterinterval; 
                break;
            default:
                    crit_enabled = 1;
                    with(obj_goblin)
                    {
                        visible = true;
                        image_xscale = 1;
                        sprite_index = spr_goblinFront;
                        x = 1016;
                        y = 1112;
                        free = true;
                        hspeed = 0;
                        vspeed = 0;
                    }
                    room_goto(cs_placement01);
        }//end of switch for first battle

        bantercounter+=1;
    }//end of battle 1 banter

    else

    if(battlecount == 2)
    {
        switch(bantercounter)
        {
          case 0:
            if last_performance_errors&lt;2
            quick_message(hero[0],"Oh yeah, my critical attacks 
                #hit the mark!");
            else
            quick_message(hero[0],"Not sure my crits are working...
                #Oh well.");
            alarm[0] = banterinterval;
            break;
          case 1:
            fadeout();
            sound_fade(mus_peace,0,2000)
            alarm[0] = banterinterval; 
            break;
          default:  
            taunt_enabled = 1;
            with(obj_goblin)
            {
                visible = true;
                image_xscale = 1;
                sprite_index = spr_goblinFront;
                x = 1016;
                y = 1112;
                free = true;
                hspeed = 0;
                vspeed = 0;
            }
            room_goto(cs_placement01);
        }
        //end of switch for battle 2

    bantercounter+=1;
    }//end of battle 2 banter
    
    else

    if(battlecount == 3)
    {
        switch(bantercounter)
        {
            case 0:
                if last_performance_errors&lt;2
                quick_message(hero[2],"Hmmm, that taunt was pretty effective.");
                else
                quick_message(hero[2],"Well that taunt sucks.");
                alarm[0] = banterinterval;
                break;
              case 1:
                if last_performance_errors&lt;2
                quick_message(hero[0],"Nah, forget that. 
                    #No need to protect me.");
                else
                quick_message(hero[0],"Doesn't matter. 
                    #I showed that goblin who's boss.");
                alarm[0] = banterinterval;
                break;
              case 2:
                quick_message(hero[1],"...");
                alarm[0] = banterinterval;
                break;
              case 3:
                fadeout();
                sound_fade(mus_peace,0,2000)
                alarm[0] = banterinterval; 
                break;
              default:  
                items_enabled = 1;
                with(obj_goblin)
                {
                    visible = true;
                    image_xscale = 1;
                    sprite_index = spr_goblinFront;
                    x = 1016;
                    y = 1112;
                    free = true;
                    hspeed = 0;
                    vspeed = 0;
                }
                room_goto(cs_placement01);
        }//end of switch for battle 3

        bantercounter+=1;
    }//end of battle 3 banter

else

    if(battlecount == 4)
    {
        switch(bantercounter)
        {
          case 0:
            if last_performance_errors == 3
            quick_message(hero[0],"Wow! look at all this loot! 
                #Let's farm this guy more!");
            else if last_performance_errors == 0
            quick_message(hero[2],"Still no item drops and just 10XP. 
                #What a waste of time");
            else
            quick_message(hero[0],"Pretty good drops. Onward!");
            alarm[0] = banterinterval;
            break;
          case 1:    
            break;
          case 2:    
            break;
          case 3:
            fadeout();
            sound_fade(mus_peace,0,2000)
            alarm[0] = banterinterval; 
            break;
          default:  
            break;
        }
        //end of switch for battle 4
    
    bantercounter+=1;
    }
//end of battle 4 banter



}//end of ending banter
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set background
battlecount = 0;
//rm_battle_forest.background_index = bg_battle_iceDungeon;
/*
switch (battlecount)
{
    case 0:
        
        break;
    case 1:
        rm_battle_forest.background_index = bg_battle_iceDungeon;
        break;
    case 2:
        rm_battle_forest.background_index = bg_battle_desert;
        break;
    case 3:
        rm_battle_forest.background_index = bg_battle_undergroundDungeon;
        break;
    default:
        rm_battle_forest.background_index = bg_battle_forest;
        break;
    
    
}*/

//rm_battle_forest.background_index = bg_battle_forest;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="87">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cursor selection
audio_play_sound(sfx_select, 1, 0);
switch(myturn)
{
    // Move cursor taking into account dead heroes
    case turnPhase.SelectWhoToSkill:
    case turnPhase.SelectWhoToAttack:
        if ((targetselect==0) &amp;&amp; (hero[2].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[2].x;
            obj_pointer.y = hero[2].y;
            targetselect = 2;
        }
        else if ((targetselect==0) &amp;&amp; (hero[1].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[1].x;
            obj_pointer.y = hero[1].y;
            targetselect = 1;
        }
        else if ((targetselect==0) &amp;&amp; (hero[0].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[0].x;
            obj_pointer.y = hero[0].y;
            targetselect = 0;
        }
        else if ((targetselect==1) &amp;&amp; (hero[0].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[0].x;
            obj_pointer.y = hero[0].y;
            targetselect = 0;
        }
        else if ((targetselect==1) &amp;&amp; (hero[2].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[2].x;
            obj_pointer.y = hero[2].y;
            targetselect = 2;
        }
        else if ((targetselect==1) &amp;&amp; (hero[1].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[1].x;
            obj_pointer.y = hero[1].y;
            targetselect = 1;
        }
        else if ((targetselect==2) &amp;&amp; (hero[1].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[1].x;
            obj_pointer.y = hero[1].y;
            targetselect = 1;
        }
        else if ((targetselect==2) &amp;&amp; (hero[0].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[0].x;
            obj_pointer.y = hero[0].y;
            targetselect = 0;
        }
        else if ((targetselect==2) &amp;&amp; (hero[2].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[2].x;
            obj_pointer.y = hero[2].y;
            targetselect = 2;
        }
        break;
    case turnPhase.SelectCommand:
        var commandCount;
        switch (actingObject)
        {
            case obj_battlegob:
                commandCount = array_length_1d(GobCommands) - 1;
                break;
            case obj_battleYeti:
                commandCount = array_length_1d(YetiCommands) - 1;
                break;
            case obj_battleUnicorn:
                commandCount = array_length_1d(UnicornCommands) - 1;
                break;
            default:
                break;
        }
        if(commandMenuIndex == 0)
        {
            commandMenuIndex = commandCount;
            obj_pointer.y = 476 + (commandCount * 28);
        }
        else
        {
            commandMenuIndex--;
            obj_pointer.y -= 28;
        }
        break;
    // Skills submenu
    case turnPhase.SelectSkills:
        var skillCount;
        switch (actingObject)
        {
            case obj_battlegob:
                skillCount = array_height_2d(GobSkills) - 1;
                break;
            case obj_battleYeti:
                skillCount = array_height_2d(YetiSkills) - 1;
                break;
            case obj_battleUnicorn:
                skillCount = array_height_2d(UnicornSkills) - 1;
                break;
            default:
                break;
        }
        if(commandSkillsMenuIndex == 0)
        {
            commandSkillsMenuIndex = skillCount;
            obj_pointer.y = obj_skillsMenu.y - (obj_skillsMenu.sprite_height/2) + 36 + (skillCount * 28);
        }
        else
        {
            commandSkillsMenuIndex--;
            obj_pointer.y -= 28;
        }
        break;
    default:
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cursor Selection
audio_play_sound(sfx_select, 1, 0);
switch (myturn)
{
    // move cursor taking into account dead heroes
    case turnPhase.SelectWhoToSkill:
    case turnPhase.SelectWhoToAttack:
        if ((targetselect == 1) &amp;&amp; (hero[2].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[2].x;
            obj_pointer.y = hero[2].y;
            targetselect = 2;
        }
        else if ((targetselect == 1) &amp;&amp; (hero[0].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[0].x;
            obj_pointer.y = hero[0].y;
            targetselect = 0;
        }
        else if ((targetselect == 1) &amp;&amp; (hero[1].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[1].x;
            obj_pointer.y = hero[1].y;
            targetselect = 1;
        }
        else if ((targetselect == 2) &amp;&amp; (hero[0].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[0].x;
            obj_pointer.y = hero[0].y;
            targetselect = 0;
        }
        else if ((targetselect == 2) &amp;&amp; (hero[1].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[1].x;
            obj_pointer.y = hero[1].y;
            targetselect = 1;
        }
        else if ((targetselect == 2) &amp;&amp; (hero[2].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[2].x;
            obj_pointer.y = hero[2].y;
            targetselect = 2;
        }
        else if ((targetselect==0) &amp;&amp; (hero[1].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[1].x;
            obj_pointer.y = hero[1].y;
            targetselect = 1;
        }
        else if ((targetselect==0) &amp;&amp; (hero[2].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[2].x;
            obj_pointer.y = hero[2].y;
            targetselect = 2;
        }
        else if ((targetselect==0) &amp;&amp; (hero[0].isDead == false))
        {
            audio_play_sound(sfx_scroll,3,0);
            obj_pointer.x = hero[0].x;
            obj_pointer.y = hero[0].y;
            targetselect = 0;
        }
        break;
    case turnPhase.SelectCommand:
        var commandCount;
        switch (actingObject)
        {
            case obj_battlegob:
                commandCount = array_length_1d(GobCommands) - 1;
                break;
            case obj_battleYeti:
                commandCount = array_length_1d(YetiCommands) - 1;
                break;
            case obj_battleUnicorn:
                commandCount = array_length_1d(UnicornCommands) - 1;
                break;
            default:
                break;
        }
        if(commandMenuIndex == commandCount)
        {
            commandMenuIndex = 0;
            obj_pointer.x = 26;
            obj_pointer.y = 476;
        }
        else
        {
            commandMenuIndex++;
            obj_pointer.y += 28;
        }
        break;
    // Skills submenu
    case turnPhase.SelectSkills:
        var skillCount;
        switch (actingObject)
        {
            case obj_battlegob:
                skillCount = array_height_2d(GobSkills) - 1;
                break;
            case obj_battleYeti:
                skillCount = array_height_2d(YetiSkills) - 1;
                break;
            case obj_battleUnicorn:
                skillCount = array_height_2d(UnicornSkills) - 1;
                break;
            default:
                break;
        }
        if(commandSkillsMenuIndex == skillCount)
        {
            commandSkillsMenuIndex = 0;
            obj_pointer.x = obj_skillsMenu.x - (obj_skillsMenu.sprite_width/2) + 5;
            obj_pointer.y = obj_skillsMenu.y - (obj_skillsMenu.sprite_height/2) + 36;
        }
        else
        {
            commandSkillsMenuIndex++;
            obj_pointer.y += 28;
        }
        break;
    default:
        break;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Process Battle Menu confirmation through various battle phases
/*
myturn values
1 : initial turn, show attack command
2 : user selects, if command is attack, set 
*/
switch (myturn)
{
    case turnPhase.SelectCommand:
        switch(commandMenuIndex)
        {
            // User chose attack, let user select target
            case 0:
                audio_play_sound(sfx_select,3,0);
                myturn = turnPhase.SelectWhoToAttack;
                
                if(hero[0].isDead == false)       
                {
                    obj_pointer.x = hero[0].x;
                    obj_pointer.y = hero[0].y;
                    targetselect = 0;
                }         
                else if(hero[1].isDead == false)     
                {
                    obj_pointer.x = hero[1].x;
                    obj_pointer.y = hero[1].y;
                    targetselect = 1;
                }
                else if(hero[2].isDead == false)     
                {
                    obj_pointer.x = hero[2].x;
                    obj_pointer.y = hero[2].y;
                    targetselect = 2;
                }
                
                
                with(actingObject)
                {
                    turn_script = turn_scriptAttack;
                }
                break;
            // User selected "Skills"
            case 1:
                obj_skillsMenu.visible = true;
                audio_play_sound(sfx_select,3,0);
                obj_pointer.x = obj_skillsMenu.x - (obj_skillsMenu.sprite_width/2) + 5;
                obj_pointer.y = obj_skillsMenu.y - (obj_skillsMenu.sprite_height/2) + 36;
                myturn = turnPhase.SelectSkills;
                commandSkillsMenuIndex = 0;
                break;
        }      
        break;
    case turnPhase.SelectWhoToAttack:
        //switch(commandMenuIndex)
        //{
            // User attacks hero
            //case 0:
                audio_play_sound(sfx_select,3,0);
                obj_pointer.visible = false;
                obj_attack.visible = false;
                myturn = turnPhase.EnemyTurn;
                with(actingObject)
                {
                    //if(!actingObject.isDead)
                    //{
                        script_execute(turn_script);
                        turnDone = true;
                    //}
                }
                break;
        //}
        //break;
    // User selected a skill, let user select targets
    case turnPhase.SelectSkills:        
        var hasEnoughMP = true;
        switch(actingObject)
        {
            case obj_battlegob:
                if (obj_battlegob.currentMP &lt; GobSkills[commandSkillsMenuIndex, 1])
                {
                    hasEnoughMP = false;
                }
                break;
            case obj_battleYeti:
                if (obj_battleYeti.currentMP &lt; YetiSkills[commandSkillsMenuIndex, 1])
                {
                    hasEnoughMP = false;
                }
                break;
            case obj_battleUnicorn:
                if (obj_battleUnicorn.currentMP &lt; UnicornSkills[commandSkillsMenuIndex, 1])
                {
                    hasEnoughMP = false;
                }
                break;
        }
        
        if(hasEnoughMP)
        {
            audio_play_sound(sfx_select,3,0);
            myturn = turnPhase.SelectWhoToSkill;
           
            if(hero[0].isDead == false)       
            {
                obj_pointer.x = hero[0].x;
                obj_pointer.y = hero[0].y;
                targetselect = 0;
            }         
            else if(hero[1].isDead == false)     
            {
                obj_pointer.x = hero[1].x;
                obj_pointer.y = hero[1].y;
                targetselect = 1;
            }
            else if(hero[2].isDead == false)     
            {
                obj_pointer.x = hero[2].x;
                obj_pointer.y = hero[2].y;
                targetselect = 2;
            }
                    
            with(actingObject)
            {
                turn_script = turn_inflictSleep;
            }
        }
        break;
    case turnPhase.SelectWhoToSkill:
        audio_play_sound(sfx_select,3,0);
        obj_pointer.visible=0;
        obj_skillsMenu.visible = false;
        obj_attack.visible = false;
        myturn = turnPhase.EnemyTurn;
        with(actingObject)
        {
            script_execute(turn_script);
            turnDone = true;
        }
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go back on the command menu hierarchy
/*
myturn values
1 : initial turn, show attack command
2 : user selects, if command is attack, set 
*/
audio_play_sound(sfx_cancel,3,0);
switch (myturn)
{
    case turnPhase.SelectCommand:        
        myturn = turnPhase.SelectCommand;
        obj_attack.visible = 1;
        obj_pointer.x = 26;
        obj_pointer.y = 476;
        obj_pointer.visible = 1;
        commandMenuIndex = 0;      
        break;
    case turnPhase.SelectWhoToAttack:
        audio_play_sound(sfx_select,3,0);
        myturn = turnPhase.SelectCommand;
        obj_attack.visible = 1;
        obj_pointer.x = 26;
        obj_pointer.y = 476;
        obj_pointer.visible = 1;
        commandMenuIndex = 0;      
        break;
    // User selected a skill, let user select targets
    case turnPhase.SelectSkills:
        obj_skillsMenu.visible = false;
        audio_play_sound(sfx_select,3,0);
        obj_pointer.x = 26;
        obj_pointer.y = 476 + 28;
        myturn = turnPhase.SelectCommand;
        commandSkillsMenuIndex = 0;
        break;
    // User selected a skill, let user select targets
    case turnPhase.SelectWhoToSkill:
        audio_play_sound(sfx_select,3,0);
         obj_pointer.x = obj_skillsMenu.x - (obj_skillsMenu.sprite_width/2) + 5;
        obj_pointer.y = obj_skillsMenu.y - (obj_skillsMenu.sprite_height/2) + 36 + (commandSkillsMenuIndex * 28);
        myturn = turnPhase.SelectSkills;
        commandSkillsMenuIndex = 0;
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
